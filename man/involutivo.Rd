% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Involutivo.R
\name{involutivo_estatico}
\alias{involutivo_estatico}
\alias{AREA_CONSTRUIDA}
\alias{VGV}
\alias{FCI}
\alias{FCV}
\alias{FCL}
\alias{FC}
\alias{VPL}
\alias{sensibilidade_tma}
\alias{sensibilidade_custo}
\alias{sensibilidade_venda}
\alias{sensibilidade_bdi_i}
\alias{sensibilidade_bdi_c}
\alias{sensibilidade_vv}
\alias{vpl_sim}
\title{Real States appraisals based in the involutive method}
\usage{
involutivo_estatico(vgv, cc, bdi_c, bdi_i, cor)

AREA_CONSTRUIDA(area_terreno, IA, np)

VGV(area_construida, valor_unitario)

FCI(cc, wc, bdi_c, index = seq(0, length(wc) - 1))

FCV(vgv, wv, index = seq(0, length(wv) - 1))

FCL(fcv, fci, bdi_i, cor)

FC(fcv, fci, bdi_i, cor, tma)

VPL(fcl, tma)

sensibilidade_tma(range, fcl)

sensibilidade_custo(range, cc, wc, vgv, wv, bdi_i, bdi_c, cor, tma)

sensibilidade_venda(range, cc, wc, vgv, wv, bdi_i, bdi_c, cor, tma)

sensibilidade_bdi_i(range, cc, wc, vgv, wv, bdi_i, bdi_c, cor, tma)

sensibilidade_bdi_c(range, cc, wc, vgv, wv, bdi_i, bdi_c, cor, tma)

sensibilidade_vv(range, cc, wc, vgv, wv, bdi_i, bdi_c, cor, tma)

vpl_sim(Nsim, ranges, variables, distribution = "uniform", params,
  dependencia = diag(length(ranges)))
}
\arguments{
\item{vgv}{Overall Sales Value}

\item{cc}{Constructions Costs}

\item{bdi_c}{Constructors Budget Difference Income}

\item{bdi_i}{Developers Budget Difference Income}

\item{cor}{Brokerage fee}

\item{area_terreno}{land area}

\item{IA}{rate of land use}

\item{np}{floors}

\item{area_construida}{Building area (sq. meters)}

\item{valor_unitario}{unit selling value ($/sq. meters)}

\item{wc}{vector of weights of the total constructions costs over periods}

\item{index}{a vector with the periods in which are made the expenses}

\item{wv}{vector of weights of the total expected sales over periods}

\item{fcv}{the expected sales cash flow}

\item{fci}{the expected investment cash flow}

\item{tma}{the attractiveness rate}

\item{fcl}{the Net Cash Flow of the project}

\item{range}{range of variation}

\item{Nsim}{Número de simulacões}

\item{ranges}{Intervalos de variacao de cada variavel}

\item{variables}{Variaveis utilizadas para o computo do VPL}

\item{distribution}{Distribuicao a priori a ser utilizada para
gerar as  variaveis}

\item{params}{parâmtros a serem utilizados pelas distribuicões a priori.}

\item{dependencia}{matriz de covariância entre as variaveis}
}
\value{
the maximum building area

The Overall Sales Value

a vector containing the expected investment cash flow

a vector containing the expected sales cash flow

the expected Net Cash Flow

the net present value of the project
}
\description{
Real States appraisals based in the involutive method

Building Area

Overall Sales Value calculation

Investment cash flow

Sales Cash Flow

Net Cash Flow

Cash Flow table

Net Present Value

Sensibilidade aa TMA

Sensibilidade-custo do VPL

Sensibilidade-venda do VPL

Sensibilidade-BDI do Incorporador

Sensibilidade-BDI do Construtor

Sensibilidade-Fluxo de Vendas

Simulacao com o Método de Monte Carlo
}
\examples{
ac <- AREA_CONSTRUIDA(630, 2.5, 5)
vgv <- VGV(20*94.5, 7000)
wc <- c(5.67, 6.63, 7.24, 7.55, 10.76, 13.26, 14.72, 13.16, 14.18, 6.84)/100
bdi_c <- 31.46/100
cc <-  3523496.76
fci_provavel <- FCI(cc = cc, wc = wc, bdi_c = bdi_c)
wv <- c(0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2)/20
fcv_provavel <- FCV(vgv = vgv, wv = wv)
bdi_i <- 23.5223/100
cor <- 5/100
fcl_provavel <- FCL(fcv_provavel, fci_provavel, bdi_i = bdi_i, cor = cor)
tma <- 1.91/100
FC(fcv_provavel, fci_provavel, bdi_i = bdi_i, cor = cor, tma = tma)
vpl_provavel <- VPL(fcl_provavel, tma = tma)
range_tma <- c(1.2, 2.6)/100
s_tma <- sensibilidade_tma(range_tma, fcl_provavel)
s_tma

require(ggplot2)
ggplot(s_tma, aes(x = TMA, y = VPL)) +
  geom_line() + geom_point() +
  scale_x_continuous(labels = scales::percent) +
  scale_y_continuous(labels = reais()) +
  labs(title = "Sensibilidade aa TMA")
range_custos <- c(.9, 1.1)
s_custo <- sensibilidade_custo(range = range_custos,
                               cc = cc, wc = wc,
                               vgv = vgv, wv = wv,
                               bdi_i = bdi_i, bdi_c = bdi_c,
                               cor = cor, tma = tma)
s_custo

ggplot(s_custo, aes(x = CC, y = VPL)) +
  geom_line() + geom_point() +
  scale_x_continuous(labels = reais()) +
  scale_y_continuous(labels = reais()) +
  labs(title = "Sensibilidade aa variacao dos Custos de Construcao")
range_vgv <- c(.9, 1.1)
s_vgv <- sensibilidade_venda(range = range_vgv,
                               cc = cc, wc = wc,
                               vgv = vgv, wv = wv,
                               bdi_i = bdi_i, bdi_c = bdi_c,
                               cor = cor, tma = tma)
s_vgv
ggplot(s_vgv, aes(x = Vendas, y = VPL)) +
  geom_point() + geom_line() +
  scale_x_continuous(labels = reais()) +
  scale_y_continuous(labels = reais()) +
  labs(title = "Sensibilidade aa variacao dos Precos de Venda")
range_bdi_i <- c(0.9, 1.1)

s_bdi_i <- sensibilidade_bdi_i(range_bdi_i,
                             cc = cc, wc = wc,
                             vgv = vgv, wv = wv,
                             bdi_i = bdi_i, bdi_c = bdi_c,
                             cor = cor, tma = tma)
s_bdi_i
range_bdi_c <- c(0.9, 1.1)
s_bdi_c <- sensibilidade_bdi_c(range = range_bdi_c,
                               cc = cc, wc = wc,
                               vgv = vgv, wv = wv,
                               bdi_i = bdi_i, bdi_c = bdi_c,
                               cor = cor, tma = tma
                               )
s_bdi_c
wv_otimista <- c(0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2)/20
wv_pessimista <- c(0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1)/20
range_vv <- list(Pessimista = wv_pessimista, Provavel = wv, 
Otimista = wv_otimista)
s_vv <- sensibilidade_vv(range_vv,
                         cc = cc, wc = wc,
                         vgv = vgv,
                         bdi_i = bdi_i, bdi_c = bdi_c,
                         cor = cor, tma = tma)
s_vv
ggplot(s_vv, aes(x = Situacao, y = VPL)) +
  geom_col() +
  scale_y_continuous(labels = reais()) +
  labs(title = "Sensibilidade aa variacao da velocidade de vendas")
## Simulacao de Monte Carlo com distribuicao uniforme e dependencia total

set.seed(1)
ranges <- list(vgv = c(min = 0.9, max = 1.1),
               cc = c(min = 0.9, max = 1.1),
               bdi_i = c(min = 0.9, max = 1.1),
               bdi_c = c(min = 0.9, max = 1.1)
)
variables <- list(vgv = vgv, wv = wv, cc = cc, wc = wc, bdi_i = bdi_i, 
bdi_c = bdi_c, cor = cor, tma = tma)
dependencia100 <- matrix(data = c(1, -1, -1, -1,
                                  -1, 1, 1, 1,
                                  -1, 1, 1, 1,
                                  -1, 1, 1, 1), nrow = 4, 
                                  byrow = TRUE, 
                                  dimnames = list(names(ranges), 
                                                  names(ranges)))

Nsim <- 500

vpl_unif100 <- vpl_sim(Nsim, ranges = ranges, variables = variables,
                   distribution = "uniform", dependencia = dependencia100)
m_unif100 <- mean(vpl_unif100$vpl)
std_unif100 <- sd(vpl_unif100$vpl)
hist(vpl_unif100$vpl, freq = FALSE)
curve(dnorm(x, mean = m_unif100, sd = std_unif100), col = "darkblue", 
lwd = 2, add = TRUE, yaxt = "n")
summary(vpl_unif100$vpl)

# Its possible to compute the probabilities based in the simulations:
mean(vpl_unif100$vpl < 0.85*m_unif100) # probability that VPL < 85\% of the mean

# Or compute the probabilities based on the normal curve with mean and sd 
# equals to that of the simulation.
pnorm(0.85*m_unif100, mean = m_unif100, sd = std_unif100)

## Simulacao de Monte Carlo com distribuicao uniforme e dependencia 50\%

dependencia50 <- matrix(data = c(1, -.5, -.5, -.5,
                                -.5, 1, .5, .5,
                                -.5, .5, 1, .5,
                                -.5, .5, .5, 1), 
                                nrow = 4, 
                                byrow = TRUE, 
                                dimnames = list(names(ranges), 
                                                names(ranges)))

vpl_unif50 <- vpl_sim(Nsim, ranges = ranges, variables = variables,
                   distribution = "uniform", dependencia = dependencia50)
m_unif50 <- mean(vpl_unif50$vpl)
std_unif50 <- sd(vpl_unif50$vpl)
hist(vpl_unif50$vpl, freq = FALSE)
curve(dnorm(x, mean = m_unif50, sd = std_unif50), col = "darkblue", lwd = 2, 
add = TRUE, yaxt = "n")
summary(vpl_unif50$vpl)

## Simulacao de Monte Carlo com dist. uniforme e variaveis 100\% independentes

dependencia0 <- diag(4)
dimnames(dependencia0) <- list(names(ranges), names(ranges))

vpl_unif <- vpl_sim(Nsim, ranges = ranges, variables = variables,
                   distribution = "uniform", dependencia = dependencia0)
m_unif <- mean(vpl_unif$vpl)
std_unif <- sd(vpl_unif$vpl)
hist(vpl_unif$vpl, freq = FALSE)
curve(dnorm(x, mean = m_unif, sd = std_unif), col = "darkblue", lwd = 2, 
add = TRUE, yaxt = "n")
summary(vpl_unif$vpl)

## Simulacao de Monte Carlo com distribuicao beta e dependencia 100\%
params <- list(vgv = c(shape1 = 2, shape2 = 2),
               cc = c(shape1 = 2, shape2 = 2),
               bdi_i = c(shape1 = 2, shape2 = 2),
               bdi_c = c(shape1 = 2, shape2 = 2)
)
vpl_beta <- vpl_sim(Nsim, ranges = ranges, variables = variables, 
                    distribution = "beta", params = params, 
                    dependencia = dependencia100)

m_beta <- mean(vpl_beta$vpl)
std_beta <- sd(vpl_beta$vpl)
ggplot(vpl_beta, aes(vpl)) +
 geom_histogram(aes(y =..density..), col="red", fill="green", alpha=.2) +
  stat_function(
    fun = dnorm,
    args = list(mean = m_beta, sd = std_beta)
  )
}
